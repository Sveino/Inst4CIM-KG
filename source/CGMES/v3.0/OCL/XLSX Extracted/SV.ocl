import CIM100 : 'http://iec.ch/TC57/CIM100#/'

package CIM100

--Dummy Entry as OCL doesn't like def before inv
context CIM100::TC57CIMVersion
inv __ : true

context IEC61970::Base::DC::ACDCConverter
--docReference non-QoCDC Key=9b5ab464-b4d3-4155-80a9-906924c096e9 Profile=SV
--message The attribute shall be a positive value.
inv ACDCConverter_poleLossP_valueRange : (self.poleLossP >  0.0)

--docReference non-QoCDC Key=28b763a3-74e2-46df-b3b4-d489ec53c802 Profile=SV
--message The attribute shall be a positive value.
inv ACDCConverter_uc_valueRange : (self.uc >  0.0)

--docReference non-QoCDC Key=477da6ba-07bd-4bf3-b78e-048b45ba831e Profile=SV
--message The attribute shall be a positive value.
inv ACDCConverter_udc_valueRange : (self.udc >  0.0)

context IEC61970::Base::Core::ConductingEquipment
def : PATL_LIMIT_VALUE_DIFF : Real = 0.1
--docReference non-QoCDC Key=2f0a11e9-c520-4471-9532-706ffac223b7 Profile=SV
--message All state variables shall be instantiated in the SV instance file for all energized elements part of a TopologicalIsland independently of the regulating status of the elements (e.g. for a shunt compensator that is not regulating the SvShuntCompensatorSections.sections shall be the same as ShuntCompensator.sections). All instances shall be representing computed values obtained from a power flow calculation.  For SvPowerFlow instances refer to profile constraint on the SvPowerFlow class.
inv ConductingEquipment_SV4: (		if self.Terminals->select(TopologicalNode <> null and TopologicalNode.AngleRefTopologicalIsland <> null)->notEmpty() then
			self.SvStatus = null
		else true endif)

context IEC61970::Base::DC::CsConverter
--docReference non-QoCDC Key=8e1fb1b8-3bc1-483d-93f3-80dd38902cbe Profile=SV
--message The attribute shall be a positive value.
inv CsConverter_alpha_valueRange : (self.alpha >  0.0)

--docReference non-QoCDC Key=50e37dcd-f22d-415f-a33c-e2185c6d3b3d Profile=SV
--message Typical value between 10 degrees and 18 degrees for a rectifier. 
inv CsConverter_alpha_valueRangeTypical : ((self.alpha >= 10.0) and
(self.alpha <=  18.0))

--docReference non-QoCDC Key=95c61d90-97cc-46ee-881b-0d175dac006d Profile=SV
--message The attribute shall be a positive value.
inv CsConverter_gamma_valueRange : (self.gamma >  0.0)

--docReference non-QoCDC Key=f77e8b25-4f06-4ed6-9e94-f9ff78983ef6 Profile=SV
--message Typical value between 17 degrees and 20 degrees for an inverter. 
inv CsConverter_gamma_valueRangeTypical : ((self.gamma >= 17.0) and
(self.gamma <=  20.0))

context IEC61970::Base::Core::IdentifiedObject
def : EIC_LENGTH : Integer = 16
def : SHORT_NAME_LENGTH : Integer = 12
def : IO_NAME_LENGTH : Integer = 32
def : IO_DESCRIPTION_LENGTH : Integer = 256
--docReference non-QoCDC Key=a93e8322-26e2-42a7-b963-619ddaab80a4 Profile=SV
--message The string IdentifiedObject.name has a maximum of 128 characters.
inv IdentifiedObject_name_stringLength : (self.name.size() <= 128.0)

context IEC61970::Base::StateVariables::SvPowerFlow
--docReference non-QoCDC Key=ccdd7d0e-450e-4da9-82ef-d12c3b7dd00b Profile=SV
--message The SvPowerFlow.p that is given by the steady state power flow solution for a SynchronousMachine shall normally be within the capability of the machine defined in the ReactiveCapabilityCurve or GeneratingUnit.maxOperatingP and GeneratingUnit.minOperatingP when ReactiveCapabilityCurve is not present. Active power can be outside the capability as part of start-up or shutdown of the generator. CIM cannot represent different operation mode so this constraint will only give a warning. Note that different data exchange processes can assign more restrictive severity depending on the business needs and power flow algorithm applied by the business process.
inv SvPowerFlow_synchronousMachine: (		if self.Terminal.ConductingEquipment.oclIsKindOf(IEC61970::Base::Wires::SynchronousMachine) then
			let sm : IEC61970::Base::Wires::SynchronousMachine = self.Terminal.ConductingEquipment.oclAsType(IEC61970::Base::Wires::SynchronousMachine) in
			if sm.ReactiveCapabilityCurves->notEmpty() then
				let curvePoints : Sequence(IEC61970::Base::Core::CurveData) = sm.ReactiveCapabilityCurves.CurveDatas->sortedBy(xvalue)->asSequence() in
				self.p >= curvePoints->first().xvalue and self.p <= curvePoints->last().xvalue
			else
				self.p >= sm.GeneratingUnit.minOperatingP and self.p <= sm.GeneratingUnit.maxOperatingP
			endif
		else true endif)

--docReference non-QoCDC Key=43c47237-a3c6-47a2-a5c1-ab562cbd5391 Profile=SV
--message The SvPowerFlow.q that is given by the steady state power flow solution for a SynchronousMachine shall normally be within the capability of the machine defined in the ReactiveCapabilityCurve or SynchronousMachine.maxQ, SynchronousMachine.minQ when ReactiveCapabilityCurve is not present. Reactive power can be outside the capability if powerflow excludes reactive restriction. CIM cannot represent this so this contains will also give a warning.  Note that different data exchange processes can assign  more restrictive severity depending on the business needs and power flow algorithm applied by the business process.
inv SvPowerFlow_synchronousMachine: (		if self.Terminal.ConductingEquipment.oclIsKindOf(IEC61970::Base::Wires::SynchronousMachine) then
			let sm : IEC61970::Base::Wires::SynchronousMachine = self.Terminal.ConductingEquipment.oclAsType(IEC61970::Base::Wires::SynchronousMachine) in
			if sm.ReactiveCapabilityCurves->notEmpty() then
				let curvePointsMin : Sequence(IEC61970::Base::Core::CurveData) = sm.ReactiveCapabilityCurves.CurveDatas->sortedBy(y1value)->asSequence() in
				let curvePointsMax : Sequence(IEC61970::Base::Core::CurveData) = sm.ReactiveCapabilityCurves.CurveDatas->sortedBy(y2value)->asSequence() in
				self.q >= curvePointsMin->first().y1value and self.q <= curvePointsMax->last().y2value
			else
				self.q >= sm.minQ and self.p <= sm.maxQ
			endif
		else true endif)

context IEC61970::Base::StateVariables::SvShuntCompensatorSections
--docReference non-QoCDC Key=ffe1ba71-012e-4e6b-b4c4-aef2f2031d34 Profile=SV
--message The attribute shall be a positive value or zero.
inv SvShuntCompensatorSections_sections_valueRange : (self.sections >= 0.0)

--docReference non-QoCDC Key=dcbfda5c-87b5-45ba-93a8-b750009ad662 Profile=SV
--message In cases where RegulatingControl.discrete is true and RegulatingControl.enabled is true, SvShuntCompensatorSections.sections shall be integer.  
inv SvShuntCompensatorSections_value: (	if self.ShuntCompensator.RegulatingControl <> null and self.ShuntCompensator.RegulatingControl.discrete = true and self.ShuntCompensator.RegulatingControl.enabled = true then
		self.sections = self.sections.round()
	else true endif)

--docReference non-QoCDC Key=cf6934ab-b5b2-47bd-b0ae-e04462f05f86 Profile=SV
--message All state variables shall be instantiated in the SV instance file for all energized elements part of a TopologicalIsland independently of the regulating status of the elements (e.g. for a shunt compensator that is not regulating the SvShuntCompensatorSections.sections shall be the same as ShuntCompensator.sections). All instances shall be representing computed values obtained from a power flow calculation.  For SvPowerFlow instances refer to profile constraint on the SvPowerFlow class.
inv SvShuntCompensatorSections_SV4: (	if self.ShuntCompensator.RegulatingControl = null or self.ShuntCompensator.RegulatingControl.enabled = false then
		self.sections = self.ShuntCompensator.sections
	else true endif)

context IEC61970::Base::StateVariables::SvTapStep
def : SSH_SV_MAX_TAP_STEP_DIFF : Real = 2
--docReference non-QoCDC Key=51dff80d-9cfa-4514-9008-8ffd5ab0016c Profile=SV
--message This is not the tap ratio, but rather the tap step position as defined by the related tap changer model and normally is constrained to be within the range of minimum and maximum tap positions.
inv SvTapStep_position_valueRange : ((self.position >= self.TapChanger.lowStep) and
(self.position <=  self.TapChanger.highStep))

--docReference non-QoCDC Key=5ac680f2-4815-4a63-96a9-03570dcad1cf Profile=SV
--message In cases where RegulatingControl.discrete is true and RegulatingControl.enabled is true, SvTapStep.position shall be integer.  
inv SvTapStep_value: (	if self.TapChanger.TapChangerControl <> null and self.TapChanger.TapChangerControl.discrete = true and self.TapChanger.TapChangerControl.enabled = true then
		self.position = self.position.round()
	else true endif)

--docReference non-QoCDC Key=639a7ddd-074f-450c-8b61-2c2f83c77e4a Profile=SV
--message All state variables shall be instantiated in the SV instance file for all energized elements part of a TopologicalIsland independently of the regulating status of the elements (e.g. for a shunt compensator that is not regulating the SvShuntCompensatorSections.sections shall be the same as ShuntCompensator.sections). All instances shall be representing computed values obtained from a power flow calculation.  For SvPowerFlow instances refer to profile constraint on the SvPowerFlow class.
inv SvTapStep_SV4: (	if self.TapChanger.TapChangerControl = null or self.TapChanger.TapChangerControl.enabled = false then
		self.position = self.TapChanger.step
	else true endif)

context IEC61970::Base::StateVariables::SvVoltage
--docReference non-QoCDC Key=e37a4203-0b40-4675-a187-fb0bccbbdcd5 Profile=SV
--message The attribute shall be a positive value.
inv SvVoltage_v_valueRange : (self.v >  0.0)

context IEC61970::Base::Wires::Switch
def : SSH_SV_MAX_Q_DIFF : Real = 50
def : SSH_SV_TOT_P_DIFF : Real = 200
def : SSH_SV_MAX_P_DIFF : Real = 10
--docReference non-QoCDC Key=4c29fb3e-b4d1-4126-8f90-44c4f788fe33 Profile=SV
--message SvSwitch shall be exchanged for all switching devices. It is expected that in most cases the SvSwitch.open in SV instance data will be identical with Switch.open in SSH instance data. However, in cases where a regulating control is modifying the connection state of the controlled device a difference between SvSwitch.open and Switch.open can occur.
inv Switch_SvSwitch_instance : (self.SvSwitch <> null)

--docReference non-QoCDC Key=d9102906-306e-42f4-a48b-fca47d27c1ee Profile=SV
--message All state variables shall be instantiated in the SV instance file for all energized elements part of a TopologicalIsland independently of the regulating status of the elements (e.g. for a shunt compensator that is not regulating the SvShuntCompensatorSections.sections shall be the same as ShuntCompensator.sections). All instances shall be representing computed values obtained from a power flow calculation.  For SvPowerFlow instances refer to profile constraint on the SvPowerFlow class.
inv Switch_SV4: (		if self.Terminals->select(TopologicalNode <> null and TopologicalNode.AngleRefTopologicalIsland <> null)->notEmpty() then
			self.SvSwitch = null
		else true endif)

context IEC61970::Base::Topology::TopologicalIsland
--docReference non-QoCDC Key=4685cd8e-dae9-4167-97e5-caa4b84f1d2f Profile=SV
--message Normally there is one TopologicalNode that is selected as the angle reference for each island.  
inv TopologicalIsland_AngleRefTopologicalNode_referencedNode : (self.AngleRefTopologicalNode <> null)

context IEC61970::Base::Topology::TopologicalNode
def : ISO_CODES : Set(String) = Set{'Code','AF','AX','AL','DZ','AS','AD','AO','AI','AQ','AG','AR','AM','AW','AU','AT','AZ','BS','BH','BD','BB','BY','BE','BZ','BJ','BM','BT','BO','BQ','BA','BW','BV','BR','IO','BN','BG','BF','BI','KH','CM','CA','CV','KY','CF','TD','CL','CN','CX','CC','CO','KM','CG','CD','CK','CR','CI','HR','CU','CW','CY','CZ','DK','DJ','DM','DO','EC','EG','SV','GQ','ER','EE','ET','FK','FO','FJ','FI','FR','GF','PF','TF','GA','GM','GE','DE','GH','GI','GR','GL','GD','GP','GU','GT','GG','GN','GW','GY','HT','HM','VA','HN','HK','HU','IS','IN','ID','IR','IQ','IE','IM','IL','IT','JM','JP','JE','JO','KZ','KE','KI','KP','KR','KW','KG','LA','LV','LB','LS','LR','LY','LI','LT','LU','MO','MK','MG','MW','MY','MV','ML','MT','MH','MQ','MR','MU','YT','MX','FM','MD','MC','MN','ME','MS','MA','MZ','MM','NA','NR','NP','NL','NC','NZ','NI','NE','NG','NU','NF','MP','NO','OM','PK','PW','PS','PA','PG','PY','PE','PH','PN','PL','PT','PR','QA','RE','RO','RU','RW','BL','SH','KN','LC','MF','PM','VC','WS','SM','ST','SA','SN','RS','SC','SL','SG','SX','SK','SI','SB','SO','ZA','GS','SS','ES','LK','SD','SR','SJ','SZ','SE','CH','SY','TW','TJ','TZ','TH','TL','TG','TK','TO','TT','TN','TR','TM','TC','TV','UG','UA','AE','GB','US','UM','UY','UZ','VU','VE','VN','VG','VI','WF','EH','YE','ZM','ZW'}
--docReference non-QoCDC Key=ee148b93-9ff0-445c-a82f-41b40a4ee415 Profile=SV
--message Normally there is one angle reference node for each island.
inv TopologicalNode_AngleRefTopologicalIsland_referencedIsland : (self.AngleRefTopologicalIsland <> null)

context IEC61970::Base::DC::VsConverter
--docReference non-QoCDC Key=412af101-bab8-4802-ae81-c06934785065 Profile=SV
--message The attribute shall be a positive value or zero.
inv VsConverter_delta_valueRange : (self.delta >= 0.0)

--docReference non-QoCDC Key=953d10f3-6cda-474b-9640-41dcfc1db173 Profile=SV
--message The attribute shall be a positive value.
inv VsConverter_uv_valueRange : (self.uv >  0.0)

endpackage
